#!/bin/sh
#############################################################################
# This is a Chisel RTL generator configuration script file. 
# The purpose is to control the compilation and testing
# in parametrized manner from this single file
# Created by Marko Kosunen on 24.03.2015
# Last modification by Marko Kosunen, marko.kosunen@aalto.fi, 07.05.2018 10:15
#############################################################################
##Function to display help with -h argument and to control 
##The configuration from the commnad line
help_f()
{
    echo -e "CONFIGURE Release 1.0 (04.04.2016)"
    echo -e "configure-configuration script for Chisel RTL generation"
    echo -e "Written by Marko "Pikkis" Kosunen"
    echo -e -n "\n"
    echo -e "SYNOPSIS"
    echo -e "  configure [OPTIONS] "
    echo -e "DESCRIPTION"
    echo -e "  Producess all configurations and Makefile for the Chisel RTL generation"
    echo -e -n "\n"
    echo -e "OPTIONS"
    echo -e "  -h"
    echo -e "      Show this help."
}

while getopts CMPSh opt
do
  case "$opt" in
    h) help_f; exit 0;;
    \?) help_f;;
  esac
done


#$FIRRTL #Sets up THESDKHOME from gloabl setup file
#. ../../TheSDK.config
ROOTPATH=`pwd`
VERILOGPATH=${ROOTPATH}/verilog
SCALAPATH=${ROOTPATH}/src/main/scala
FIRRTL_JAR="$ROOTPATH/rocket-chip/firrtl/utils/bin/firrtl.jar"

VPATHDIRS=`find ${SCALAPATH}/* -type d -exec basename '{}' ';'`
MODULES="memblock f2_digital_postproc_tapein0 \
fir halfband cic3 f2_decimator clkdiv_n_2_4_8 fifo f2_rx_path fifo f2_tx_path \
f2_rx_dsp f2_tx_dsp f2_cm_serdes_lane f2_lane_switch f2_serdes_test f2_dsp edge_detector"

############################# MAKEFILE   ####################################
CURRENTFILE="${ROOTPATH}/Makefile"
echo "Creating ${CURRENTFILE} for modules:"
for i in ${MODULES}; do
    echo $i
done
cat <<EOF > ${CURRENTFILE}
#Directories
VERILOGPATH= ${VERILOGPATH}
SCALAPATH= ${SCALAPATH}
#DEPDIR :=.depdir
#\$(shell mkdir -p \$(DEPDIR) >/dev/null)
\$(shell mkdir -p \$(VERILOGPATH) >/dev/null)
MODULES= ${MODULES}

TARGETS = \$(foreach name,\$(MODULES), \$(VERILOGPATH)/\$(name).v)
#Commands
SBT=sbt -J-Xmx16G -J-Xss8M
FIRRTL=java -Xmx16G -Xss8M -cp $FIRRTL_JAR firrtl.Driver

TOUCH=touch -r
`for i in ${VPATHDIRS}; do
    echo vpath %.scala \\$\(SCALAPATH\)/$i
done`
.PHONY: all help clean \$(MODULES)


all: \$(TARGETS)

#Generate recipes for individual modules
`for i in ${MODULES}; do
    echo -e "$i: \\$(VERILOGPATH)/$i.v"
done`

#Template for conditional makes
#ifeq (\$(CONTROLLER), MATLAB)
#endif
#Figure out the naming conventions later. Package is lowercase, class equals main method
#Does not track dependencies from scala source
\$(VERILOGPATH)/%.v : %.scala  
	\$(eval package:=\$(basename \$(notdir \$@)))
	\$(eval class:=\$(basename \$(notdir \$@)))
	\$(eval testbenchfile:=\$(dir \$<)tb_\$(notdir \$<))
	\$(SBT) 'run-main \$(package).\$(class) -td \$(VERILOGPATH)' 
	@#Test if testbech generator exists and compile it
	@if [ -f \$(testbenchfile) ]; then \\
		\$(SBT) 'run-main \$(package).tb_\$(class) -td \$(VERILOGPATH)'; \\
	fi
clean:
	rm -f \$(VERILOGPATH)/*.v
	rm -f \$(VERILOGPATH)/*.anno
	rm -f \$(VERILOGPATH)/*.fir
	rm -rf \$(VERILOGPATH)
	#rm -rf \$(DEPDIR)

MMOD ?=
memmap:
    mv  \$(VERILOGPATH)/\$(MMOD).v  \$(VERILOGPATH)/\$(MMOD)_unmapped.orig.v
	\$(FIRRTL) -td ./verilog -tn \$(MMOD) -i  \$(VERILOGPATH)/\$(MMOD).fir \\
    -o \$(VERILOGPATH)/\$(MMOD).v -X verilog  \\
    --infer-rw \$(MMOD) --repl-seq-mem -c:\$(MMOD):-o:\$(VERILOGPATH)/\$(MMOD).conf
 

#Generate cleanup recipes for individual modules
`for i in ${MODULES}; do
	echo .PHONY: clean_$i
	echo clean_$i: 
	echo -e "\trm -f \\$(VERILOGPATH)/$i.v"
	echo -e "\trm -f \\$(VERILOGPATH)/$i.anno"
	echo -e "\trm -f \\$(VERILOGPATH)/$i.fir"
    echo -e "\trm -f \\$(VERILOGPATH)/${i}_memmapped.conf"
    echo -e "\trm -f \\$(VERILOGPATH)/${i}_memmapped.v"
done`

help:
	@echo "configured modules are:";
	@for i in \$(MODULES) ; do \\
	   echo \$\$i; \\
	done
##Semicolon is a must?
#\$(DEPDIR)/%.d: ;
#.PRECIOUS: \$(DEPDIR)/%.d

#Includes the dependency files for the cmdfiles generated
#by \$(MAKEDEPEND). Make is re-run, if these are created.
#during the make
#If the include is incorrect, empty recipe does not cause recompilation
#In that case, Depfiles are considered intermediate.
#include \$(MCMDFILE:\$(MATLABPATH)/%.m=\$(DEPDIR)/%.d)
#endif
EOF
##################Hereafter some files you should not need to modify ################################

